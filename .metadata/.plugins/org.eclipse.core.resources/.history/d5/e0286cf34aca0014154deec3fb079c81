package br.com.eventosbook.dao.impl;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Query;

import br.com.eventosbook.constante.Constantes;
import br.com.eventosbook.dao.DaoContratante;
import br.com.eventosbook.hibernate.util.ConnectionFactory;
import br.com.eventosbook.modelo.Contratante;


public class DaoContratanteImpl implements DaoContratante{

	private DaoContratanteImpl() {}
	private static DaoContratanteImpl aDAOContratante = new DaoContratanteImpl();

	public static DaoContratanteImpl getInstance(){
		if(DaoContratanteImpl.aDAOContratante == null){
			DaoContratanteImpl.aDAOContratante = new DaoContratanteImpl();
		}
		
		return DaoContratanteImpl.aDAOContratante;
	}
	
	
	@Override
	public void incluir(Contratante pContratante) {
		try{
			ConnectionFactory.getInstace().getConnection().getTransaction().begin();
			ConnectionFactory.getInstace().getConnection().persist(pContratante);
			ConnectionFactory.getInstace().getConnection().getTransaction().commit();
		}catch(Exception e){
			e.printStackTrace();
			System.out.println(e.getMessage());
			ConnectionFactory.getInstace().getConnection().getTransaction().rollback();
			
		} finally{
			ConnectionFactory.getInstace().getConnection().close();

		}
		
	}

	@Override
	public void alterar(Contratante pContratante) {
		try{
			ConnectionFactory.getInstace().getConnection().getTransaction().begin();
			ConnectionFactory.getInstace().getConnection().merge(pContratante);
			ConnectionFactory.getInstace().getConnection().getTransaction().commit();
		}catch(Exception e){
			e.printStackTrace();
			System.out.println(e.getMessage());
			ConnectionFactory.getInstace().getConnection().getTransaction().rollback();
			
		} finally{
			ConnectionFactory.getInstace().getConnection().close();

		}
		

	}

	@Override
	public void excluir(Contratante pContratante) {
		try{
			ConnectionFactory.getInstace().getConnection().getTransaction().begin();
			ConnectionFactory.getInstace().getConnection().remove(pContratante);
			ConnectionFactory.getInstace().getConnection().getTransaction().commit();
		}catch(Exception e){
			e.printStackTrace();
			System.out.println(e.getMessage());
			ConnectionFactory.getInstace().getConnection().getTransaction().rollback();
			
		} finally{
			ConnectionFactory.getInstace().getConnection().close();

		}
		

	}

	@Override
	public List<Contratante> consultar() {
		ArrayList<Contratante> retorno = new ArrayList<Contratante>();
		Query q = ConnectionFactory.getInstace().getConnection().createQuery("FROM " + Constantes.PATH_PROJECT + ".model.Contratante");
		retorno = (ArrayList<Contratante>) q.getResultList();
		return retorno;
	}

	@Override
	public Contratante getContratante(Contratante pContratante) {
		Contratante retorno = new Contratante();
		
		//TODO Efetuar Implementação
		return retorno;
		
	}

}
