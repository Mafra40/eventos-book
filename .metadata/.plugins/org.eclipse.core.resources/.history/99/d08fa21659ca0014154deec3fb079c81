package br.com.eventosbook.hibernate.util;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

import br.com.eventosbook.constante.ConstantesHibernate;

/*import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.boot.registry.StandardServiceRegistry;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
import org.hibernate.cfg.Configuration;*/

public class ConnectionFactory {
	
	
	private static ConnectionFactory aConnectionFactory = new ConnectionFactory();
	private static EntityManagerFactory factory  = Persistence.createEntityManagerFactory("eventosbook");
	private ThreadLocal<EntityManager> threadEntityManager = new ThreadLocal<EntityManager>();

	public static ConnectionFactory getInstace(){
		if(ConnectionFactory.aConnectionFactory == null){
			ConnectionFactory.aConnectionFactory = new  ConnectionFactory();
		}
		return ConnectionFactory.aConnectionFactory;
	}
	
	
	private static EntityManagerFactory getEnityManager(){
		
		if(factory == null || factory.isOpen()){
			factory = Persistence.createEntityManagerFactory(ConstantesHibernate.NM_PERSISTENCE);
		}
		
		return factory;
	}
	
	
	
	private EntityManager manager = getEnityManager().createEntityManager();
	
	
	
	public EntityManager getConnection(){
		
		
		
		return this.manager;
	}
	
	public void getCloseConnection(){
		
	}
	
	
	/*private Session aSession = configureConnection().openSession();
	
	private SessionFactory configureConnection(){
		Configuration configure = new Configuration();
		configure.configure();
		StandardServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder().applySettings(configure.getProperties()).build();
		SessionFactory sessionFactory = configure.buildSessionFactory(serviceRegistry);
		return sessionFactory;
	}
	
	public Session getConnection(){
		return aSession;
	}
	
	public void closeConnection(){
		this.aSession.close();
	}*/
	
}
	